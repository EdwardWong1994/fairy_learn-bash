#!/bin/bash
#
# Install ForkBase dependencies on Ubuntu.
#
# https://github.com/streamjoin/forkbase-doc/blob/master/installation/install-deps.md

set -o errexit
set -o pipefail

# Include libraries
readonly SCRIPT_HOME="$(cd "$(dirname "$0")"; pwd -P)"
source "${FAIRY_HOME:-${SCRIPT_HOME}/..}/_common_lib/output_utils.sh"

# Set variables
readonly DEPS_DIR="/usr/local/share"
readonly BASH_PROFILE="${HOME}/.profile"
readonly TEMP_DIR="$(cd ${HOME}; pwd -P)/deps_install"

readonly CMAKE_VER="3.13.4"
readonly BOOST_VER="1_69_0"
readonly GFLAGS_VER="2.2.2"
readonly PROTOBUF_VER="3.6.1"
readonly CRYPTOPP_VER="CRYPTOPP_8_0_0"
readonly ZMQ_VER="4.3.1"

readonly WORK_DIR="$(pwd -P)"
[[ "${WORK_DIR}" != "${TEMP_DIR}" ]]
check_err "The temporary directory cannot be the current working directory"

# Prepare
sudo apt install build-essential autoconf pkg-config libtool git

cat >> "${BASH_PROFILE}" <<- EndOfMsg
export SHARE_HOME="${DEPS_DIR}"
export NCORES="$(cat /proc/cpuinfo | grep "cpu cores" | uniq | awk '{print $NF}')"

EndOfMsg
source "${BASH_PROFILE}"

mkdir -p "${TEMP_DIR}"

# CMake
readonly CMAKE_PKG="cmake-${CMAKE_VER}.tar.gz"
readonly CMAKE_DIR="cmake-${CMAKE_VER}"

cd "${TEMP_DIR}"
wget "https://github.com/Kitware/CMake/releases/download/v${CMAKE_VER}/${CMAKE_PKG}"
tar xzf "${CMAKE_PKG}"

cd "${CMAKE_DIR}"
./bootstrap --prefix="${SHARE_HOME}/cmake" --parallel="${NCORES}"
make -j "${NCORES}"
sudo make install

cat >> "${BASH_PROFILE}" <<- EndOfMsg
# CMake
export CMAKE_HOME="\${SHARE_HOME}/cmake"
export PATH="\${CMAKE_HOME}/bin:\${PATH}"

EndOfMsg
source "${BASH_PROFILE}"

cd "${TEMP_DIR}" && sudo rm -rf "${CMAKE_DIR}" && rm "${CMAKE_PKG}"

# OpenSSL
sudo apt install openssl

# Boost
readonly BOOST_PKG="boost_${BOOST_VER}.tar.bz2"
readonly BOOST_DIR="boost_${BOOST_VER}"

cd "${TEMP_DIR}"
wget "https://dl.bintray.com/boostorg/release/1.69.0/source/${BOOST_PKG}"
tar xjf "${BOOST_PKG}"

cd "${BOOST_DIR}"
./bootstrap.sh --prefix="${SHARE_HOME}/boost"
sudo ./b2 install -j "${NCORES}"

cat >> "${BASH_PROFILE}" <<- EndOfMsg
# Boost
export BOOST_ROOT="\${SHARE_HOME}/boost"
export CPATH="\${BOOST_ROOT}/include:\${CPATH}"
export LD_LIBRARY_PATH="\${BOOST_ROOT}/lib:\${LD_LIBRARY_PATH}"
export LIBRARY_PATH="\${BOOST_ROOT}/lib:\${LIBRARY_PATH}"

EndOfMsg

cd "${TEMP_DIR}" && sudo rm -rf "${BOOST_DIR}" && rm "${BOOST_PKG}"

# Gflags
readonly GFLAGS_PKG="v${GFLAGS_VER}.tar.gz"
readonly GFLAGS_DIR="gflags-${GFLAGS_VER}"

cd "${TEMP_DIR}"
wget "https://github.com/gflags/gflags/archive/${GFLAGS_PKG}"
tar xzf "${GFLAGS_PKG}"

cd "${GFLAGS_DIR}"
mkdir -p build
rm -rf build/*
cd build
cmake -DCMAKE_INSTALL_PREFIX="${SHARE_HOME}/gflags" -DBUILD_SHARED_LIBS=ON -DBUILD_STATIC_LIBS=ON ..
make -j "${NCORES}"
sudo make install

cat >> "${BASH_PROFILE}" <<- EndOfMsg
# gflags
export GFLAGS_ROOT="\${SHARE_HOME}/gflags"
export CPATH="\${GFLAGS_ROOT}/include:\${CPATH}"
export LD_LIBRARY_PATH="\${GFLAGS_ROOT}/lib:\${LD_LIBRARY_PATH}"
export LIBRARY_PATH="\${GFLAGS_ROOT}/lib:\${LIBRARY_PATH}"
export CMAKE_INCLUDE_PATH="\${GFLAGS_ROOT}/include:\${CMAKE_INCLUDE_PATH}"
export CMAKE_LIBRARY_PATH="\${GFLAGS_ROOT}/lib:\${CMAKE_LIBRARY_PATH}"

EndOfMsg

cd "${TEMP_DIR}" && sudo rm -rf "${GFLAGS_DIR}" && rm "${GFLAGS_PKG}"

# Protocol Buffers
readonly PROTOBUF_PKG="v${PROTOBUF_VER}.tar.gz"
readonly PROTOBUF_DIR="protobuf-${PROTOBUF_VER}"

cd "${TEMP_DIR}"
wget "https://github.com/protocolbuffers/protobuf/archive/${PROTOBUF_PKG}"
tar xzf "${PROTOBUF_PKG}"

cd "${PROTOBUF_DIR}"
./autogen.sh
./configure --prefix="${SHARE_HOME}/protobuf"
make -j "${NCORES}"
sudo make install

cat >> "${BASH_PROFILE}" <<- EndOfMsg
# Protocol Buffers
export PROTOBUF_ROOT="\${SHARE_HOME}/protobuf"
export PATH="\${PROTOBUF_ROOT}/bin:\${PATH}"
export CPATH="\${PROTOBUF_ROOT}/include:\${CPATH}"
export LD_LIBRARY_PATH="\${PROTOBUF_ROOT}/lib:\${LD_LIBRARY_PATH}"
export LIBRARY_PATH="\${PROTOBUF_ROOT}/lib:\${LIBRARY_PATH}"
export CMAKE_INCLUDE_PATH="\${PROTOBUF_ROOT}/include:\${CMAKE_INCLUDE_PATH}"
export CMAKE_LIBRARY_PATH="\${PROTOBUF_ROOT}/lib:\${CMAKE_LIBRARY_PATH}"

EndOfMsg

cd "${TEMP_DIR}" && sudo rm -rf "${PROTOBUF_DIR}" && rm "${PROTOBUF_PKG}"

# Crypto++
readonly CRYPTOPP_PKG="${CRYPTOPP_VER}.tar.gz"
readonly CRYPTOPP_DIR="cryptopp-${CRYPTOPP_VER}"

cd "${TEMP_DIR}"
wget "https://github.com/weidai11/cryptopp/archive/${CRYPTOPP_PKG}"
tar xzf "${CRYPTOPP_PKG}"

cd "${CRYPTOPP_DIR}"
make -j "${NCORES}" libcryptopp.a libcryptopp.so
sudo make install PREFIX="${SHARE_HOME}/cryptopp"

cat >> "${BASH_PROFILE}" <<- EndOfMsg
# Crypto++
export CRYPTOPP_ROOT="\${SHARE_HOME}/cryptopp"
export CPATH="\${CRYPTOPP_ROOT}/include:\${CPATH}"
export LD_LIBRARY_PATH="\${CRYPTOPP_ROOT}/lib:\${LD_LIBRARY_PATH}"
export LIBRARY_PATH="\${CRYPTOPP_ROOT}/lib:\${LIBRARY_PATH}"
export CMAKE_INCLUDE_PATH="\${CRYPTOPP_ROOT}/include:\${CMAKE_INCLUDE_PATH}"
export CMAKE_LIBRARY_PATH="\${CRYPTOPP_ROOT}/lib:\${CMAKE_LIBRARY_PATH}"

EndOfMsg

cd "${TEMP_DIR}" && sudo rm -rf "${CRYPTOPP_DIR}" && rm "${CRYPTOPP_PKG}"

# ZMQ
readonly ZMQ_PKG="v${ZMQ_VER}.tar.gz"
readonly ZMQ_DIR="libzmq-${ZMQ_VER}"

cd "${TEMP_DIR}"
wget "https://github.com/zeromq/libzmq/archive/${ZMQ_PKG}"
tar xzf "${ZMQ_PKG}"

cd "${ZMQ_DIR}"
./autogen.sh
./configure --prefix="${SHARE_HOME}/zmq"
make -j "${NCORES}"
sudo make install

cat >> "${BASH_PROFILE}" <<- EndOfMsg
# ZMQ
export ZMQ_ROOT="\${SHARE_HOME}/zmq"
export CPATH="\${ZMQ_ROOT}/include:\${CPATH}"
export LD_LIBRARY_PATH="\${ZMQ_ROOT}/lib:\${LD_LIBRARY_PATH}"
export LIBRARY_PATH="\${ZMQ_ROOT}/lib:\${LIBRARY_PATH}"
export CMAKE_INCLUDE_PATH="\${ZMQ_ROOT}/include:\${CMAKE_INCLUDE_PATH}"
export CMAKE_LIBRARY_PATH="\${ZMQ_ROOT}/lib:\${CMAKE_LIBRARY_PATH}"

EndOfMsg
source "${BASH_PROFILE}"

cd "${TEMP_DIR}" && sudo rm -rf "${ZMQ_DIR}" && rm "${ZMQ_PKG}"

# End of script
cd "${WORK_DIR}"
sudo rm -rf "${TEMP_DIR}"
exit 0
