#!/usr/bin/env bash
#
# Install ForkBase dependencies on Ubuntu.
#
# https://github.com/streamjoin/forkbase-doc/blob/master/installation/install-deps.md

set -o errexit
set -o pipefail

# Include libraries
readonly SCRIPT_HOME="$(cd "$(dirname -- "${BASH_SOURCE}")"; pwd -P)"
source "${FAIRY_HOME:-${SCRIPT_HOME}/..}/_common_lib/output_utils.sh"
source "${FAIRY_HOME:-${SCRIPT_HOME}/..}/_common_lib/system.sh"

# Check sudo privilege
sudo -v ||
check_err "No sudo privilege for current account '${USER}'"

readonly START_TIME="$(timer)"

# Set variables
readonly BASH_PROFILE="${USTORE_BASH_PROFILE:-"${HOME}/.bash_profile"}"

DEPS_DIR="${USTORE_DEPS_DIR:-"/usr/local/share"}"
mkdir -p "${DEPS_DIR}"
readonly DEPS_DIR="$(cd "${DEPS_DIR}"; pwd -P)"

TEMP_DIR="${USTORE_TEMP_DIR:-"${HOME}/deps_install"}"
mkdir -p "${TEMP_DIR}"
readonly TEMP_DIR="$(cd "${TEMP_DIR}"; pwd -P)"

[[ "${DEPS_DIR}" != "${TEMP_DIR}" ]] ||
check_err "The dependency directory cannot be the same as the temporary directory"

readonly WORK_DIR="$(pwd -P)"
[[ "${WORK_DIR}" != "${TEMP_DIR}" ]] ||
check_err "The temporary directory cannot be the current working directory"

# Prepare
sudo apt -y install build-essential autoconf pkg-config libtool git openssl

cat >> "${BASH_PROFILE}" <<-EndOfMsg
export SHARE_HOME="$(cd ${DEPS_DIR}; pwd -P)"
export NCORES="\$(cat /proc/cpuinfo | grep "cpu cores" | uniq | awk '{print \$NF}')"

EndOfMsg
source "${BASH_PROFILE}"

# CMake
readonly CMAKE_VER="${USTORE_CMAKE_VER:-"3.13.4"}"
readonly CMAKE_PKG="cmake-${CMAKE_VER}.tar.gz"
readonly CMAKE_DIR="cmake-${CMAKE_VER}"

cd "${TEMP_DIR}"
[[ -f "${CMAKE_PKG}" ]] ||
wget "https://github.com/Kitware/CMake/releases/download/v${CMAKE_VER}/${CMAKE_PKG}"
tar xzf "${CMAKE_PKG}"

cd "${CMAKE_DIR}"
./bootstrap --prefix="${SHARE_HOME}/cmake" --parallel="${NCORES}"
make -j "${NCORES}"
sudo make install

cat >> "${BASH_PROFILE}" <<-'EndOfMsg'
# CMake
export CMAKE_HOME="${SHARE_HOME}/cmake"
export PATH="${CMAKE_HOME}/bin:${PATH}"

EndOfMsg
source "${BASH_PROFILE}"

cd "${TEMP_DIR}" && sudo rm -rf "${CMAKE_DIR}" && rm "${CMAKE_PKG}"

# Boost
readonly BOOST_VER="${USTORE_BOOST_VER:-"1_69_0"}"
readonly BOOST_PKG="boost_${BOOST_VER}.tar.bz2"
readonly BOOST_DIR="boost_${BOOST_VER}"

cd "${TEMP_DIR}"
[[ -f "${BOOST_PKG}" ]] ||
wget "https://dl.bintray.com/boostorg/release/1.69.0/source/${BOOST_PKG}"
tar xjf "${BOOST_PKG}"

cd "${BOOST_DIR}"
./bootstrap.sh --prefix="${SHARE_HOME}/boost"
sudo ./b2 install -j "${NCORES}"

cat >> "${BASH_PROFILE}" <<-'EndOfMsg'
# Boost
export BOOST_ROOT="${SHARE_HOME}/boost"
export CPATH="${BOOST_ROOT}/include:${CPATH}"
export LD_LIBRARY_PATH="${BOOST_ROOT}/lib:${LD_LIBRARY_PATH}"
export LIBRARY_PATH="${BOOST_ROOT}/lib:${LIBRARY_PATH}"

EndOfMsg

cd "${TEMP_DIR}" && sudo rm -rf "${BOOST_DIR}" && rm "${BOOST_PKG}"

# Gflags
readonly GFLAGS_VER="${USTORE_GFLAGS_VER:-"2.2.2"}"
readonly GFLAGS_PKG="v${GFLAGS_VER}.tar.gz"
readonly GFLAGS_DIR="gflags-${GFLAGS_VER}"

cd "${TEMP_DIR}"
[[ -f "${GFLAGS_PKG}" ]] ||
wget "https://github.com/gflags/gflags/archive/${GFLAGS_PKG}"
tar xzf "${GFLAGS_PKG}"

cd "${GFLAGS_DIR}"
mkdir -p build
rm -rf build/*
cd build
cmake -DCMAKE_INSTALL_PREFIX="${SHARE_HOME}/gflags" -DBUILD_SHARED_LIBS=ON -DBUILD_STATIC_LIBS=ON ..
make -j "${NCORES}"
sudo make install

cat >> "${BASH_PROFILE}" <<-'EndOfMsg'
# gflags
export GFLAGS_ROOT="${SHARE_HOME}/gflags"
export CPATH="${GFLAGS_ROOT}/include:${CPATH}"
export LD_LIBRARY_PATH="${GFLAGS_ROOT}/lib:${LD_LIBRARY_PATH}"
export LIBRARY_PATH="${GFLAGS_ROOT}/lib:${LIBRARY_PATH}"
export CMAKE_INCLUDE_PATH="${GFLAGS_ROOT}/include:${CMAKE_INCLUDE_PATH}"
export CMAKE_LIBRARY_PATH="${GFLAGS_ROOT}/lib:${CMAKE_LIBRARY_PATH}"

EndOfMsg

cd "${TEMP_DIR}" && sudo rm -rf "${GFLAGS_DIR}" && rm "${GFLAGS_PKG}"

# Protocol Buffers
readonly PROTOBUF_VER="${USTORE_PROTOBUF_VER:-"3.6.1"}"
readonly PROTOBUF_PKG="v${PROTOBUF_VER}.tar.gz"
readonly PROTOBUF_DIR="protobuf-${PROTOBUF_VER}"

cd "${TEMP_DIR}"
[[ -f "${PROTOBUF_PKG}" ]] ||
wget "https://github.com/protocolbuffers/protobuf/archive/${PROTOBUF_PKG}"
tar xzf "${PROTOBUF_PKG}"

cd "${PROTOBUF_DIR}"
./autogen.sh
./configure --prefix="${SHARE_HOME}/protobuf"
make -j "${NCORES}"
sudo make install

cat >> "${BASH_PROFILE}" <<-'EndOfMsg'
# Protocol Buffers
export PROTOBUF_ROOT="${SHARE_HOME}/protobuf"
export PATH="${PROTOBUF_ROOT}/bin:${PATH}"
export CPATH="${PROTOBUF_ROOT}/include:${CPATH}"
export LD_LIBRARY_PATH="${PROTOBUF_ROOT}/lib:${LD_LIBRARY_PATH}"
export LIBRARY_PATH="${PROTOBUF_ROOT}/lib:${LIBRARY_PATH}"
export CMAKE_INCLUDE_PATH="${PROTOBUF_ROOT}/include:${CMAKE_INCLUDE_PATH}"
export CMAKE_LIBRARY_PATH="${PROTOBUF_ROOT}/lib:${CMAKE_LIBRARY_PATH}"

EndOfMsg

cd "${TEMP_DIR}" && sudo rm -rf "${PROTOBUF_DIR}" && rm "${PROTOBUF_PKG}"

# Crypto++
readonly CRYPTOPP_VER="${USTORE_CRYPTOPP_VER:-"CRYPTOPP_8_0_0"}"
readonly CRYPTOPP_PKG="${CRYPTOPP_VER}.tar.gz"
readonly CRYPTOPP_DIR="cryptopp-${CRYPTOPP_VER}"

cd "${TEMP_DIR}"
[[ -f "${CRYPTOPP_PKG}" ]] ||
wget "https://github.com/weidai11/cryptopp/archive/${CRYPTOPP_PKG}"
tar xzf "${CRYPTOPP_PKG}"

cd "${CRYPTOPP_DIR}"
make -j "${NCORES}" libcryptopp.a libcryptopp.so
sudo make install PREFIX="${SHARE_HOME}/cryptopp"

cat >> "${BASH_PROFILE}" <<-'EndOfMsg'
# Crypto++
export CRYPTOPP_ROOT="${SHARE_HOME}/cryptopp"
export CPATH="${CRYPTOPP_ROOT}/include:${CPATH}"
export LD_LIBRARY_PATH="${CRYPTOPP_ROOT}/lib:${LD_LIBRARY_PATH}"
export LIBRARY_PATH="${CRYPTOPP_ROOT}/lib:${LIBRARY_PATH}"
export CMAKE_INCLUDE_PATH="${CRYPTOPP_ROOT}/include:${CMAKE_INCLUDE_PATH}"
export CMAKE_LIBRARY_PATH="${CRYPTOPP_ROOT}/lib:${CMAKE_LIBRARY_PATH}"

EndOfMsg

cd "${TEMP_DIR}" && sudo rm -rf "${CRYPTOPP_DIR}" && rm "${CRYPTOPP_PKG}"

# ZMQ
readonly ZMQ_VER="${USTORE_ZMQ_VER:-"4.3.1"}"
readonly ZMQ_PKG="v${ZMQ_VER}.tar.gz"
readonly ZMQ_DIR="libzmq-${ZMQ_VER}"

cd "${TEMP_DIR}"
[[ -f "${ZMQ_PKG}" ]] ||
wget "https://github.com/zeromq/libzmq/archive/${ZMQ_PKG}"
tar xzf "${ZMQ_PKG}"

cd "${ZMQ_DIR}"
./autogen.sh
./configure --prefix="${SHARE_HOME}/zmq"
make -j "${NCORES}"
sudo make install

cat >> "${BASH_PROFILE}" <<-'EndOfMsg'
# ZMQ
export ZMQ_ROOT="${SHARE_HOME}/zmq"
export CPATH="${ZMQ_ROOT}/include:${CPATH}"
export LD_LIBRARY_PATH="${ZMQ_ROOT}/lib:${LD_LIBRARY_PATH}"
export LIBRARY_PATH="${ZMQ_ROOT}/lib:${LIBRARY_PATH}"
export CMAKE_INCLUDE_PATH="${ZMQ_ROOT}/include:${CMAKE_INCLUDE_PATH}"
export CMAKE_LIBRARY_PATH="${ZMQ_ROOT}/lib:${CMAKE_LIBRARY_PATH}"

EndOfMsg
source "${BASH_PROFILE}"

cd "${TEMP_DIR}" && sudo rm -rf "${ZMQ_DIR}" && rm "${ZMQ_PKG}"

# CZMQ
readonly CZMQ_VER="${USTORE_CZMQ_VER:-"4.2.0"}"
readonly CZMQ_PKG="v${CZMQ_VER}.tar.gz"
readonly CZMQ_DIR="czmq-${CZMQ_VER}"

cd "${TEMP_DIR}"
[[ -f "${CZMQ_PKG}" ]] ||
wget "https://github.com/zeromq/czmq/archive/${CZMQ_PKG}"
tar xzf "${CZMQ_PKG}"

cd "${CZMQ_DIR}"
./autogen.sh
./configure --prefix="${SHARE_HOME}/czmq"
make -j "${NCORES}"
sudo make install

cat >> "${BASH_PROFILE}" <<-'EndOfMsg'
# CZMQ
export CZMQ_ROOT="${SHARE_HOME}/czmq"
export CPATH="${CZMQ_ROOT}/include:${CPATH}"
export LD_LIBRARY_PATH="${CZMQ_ROOT}/lib:${LD_LIBRARY_PATH}"
export LIBRARY_PATH="${CZMQ_ROOT}/lib:${LIBRARY_PATH}"
export CMAKE_INCLUDE_PATH="${CZMQ_ROOT}/include:${CMAKE_INCLUDE_PATH}"
export CMAKE_LIBRARY_PATH="${CZMQ_ROOT}/lib:${CMAKE_LIBRARY_PATH}"

EndOfMsg

cd "${TEMP_DIR}" && sudo rm -rf "${CZMQ_DIR}" && rm "${CZMQ_PKG}"

# RocksDB
readonly ROCKSDB_VER="${USTORE_ROCKSDB_VER:-"5.17.2"}"
readonly ROCKSDB_PKG="v${ROCKSDB_VER}.tar.gz"
readonly ROCKSDB_DIR="rocksdb-${ROCKSDB_VER}"

sudo apt -y install libsnappy-dev zlib1g-dev libbz2-dev liblz4-dev libzstd-dev

cd "${TEMP_DIR}"
[[ -f "${ROCKSDB_PKG}" ]] ||
wget "https://github.com/facebook/rocksdb/archive/${ROCKSDB_PKG}"
tar xzf "${ROCKSDB_PKG}"

cd "${ROCKSDB_DIR}"
make shared_lib -j "${NCORES}" USE_RTTI=1 DISABLE_WARNING_AS_ERROR=ON
sudo make install-shared INSTALL_PATH="${SHARE_HOME}/rocksdb"

cat >> "${BASH_PROFILE}" <<-'EndOfMsg'
# RocksDB
export ROCKSDB_ROOT="${SHARE_HOME}/rocksdb"
export CPATH="${ROCKSDB_ROOT}/include:${CPATH}"
export LD_LIBRARY_PATH="${ROCKSDB_ROOT}/lib:${LD_LIBRARY_PATH}"
export LIBRARY_PATH="${ROCKSDB_ROOT}/lib:${LIBRARY_PATH}"
export CMAKE_INCLUDE_PATH="${ROCKSDB_ROOT}/include:${CMAKE_INCLUDE_PATH}"
export CMAKE_LIBRARY_PATH="${ROCKSDB_ROOT}/lib:${CMAKE_LIBRARY_PATH}"

EndOfMsg

cd "${TEMP_DIR}" && sudo rm -rf "${ROCKSDB_DIR}" && rm "${ROCKSDB_PKG}"

# Gtest
readonly GTEST_VER="${USTORE_GTEST_VER:-"release-1.8.1"}"
readonly GTEST_PKG="${GTEST_VER}.tar.gz"
readonly GTEST_DIR="googletest-${GTEST_VER}"

cd "${TEMP_DIR}"
[[ -f "${GTEST_PKG}" ]] ||
wget "https://github.com/google/googletest/archive/${GTEST_PKG}"
tar xzf "${GTEST_PKG}"

cd "${GTEST_DIR}"
mkdir -p build
rm -rf build/*
cd build
cmake -DCMAKE_INSTALL_PREFIX="${SHARE_HOME}/gtest" -DBUILD_SHARED_LIBS=ON ..
make -j "${NCORES}"
sudo make install

cat >> "${BASH_PROFILE}" <<-'EndOfMsg'
# gtest
export GTEST_ROOT="${SHARE_HOME}/gtest"
export CPATH="${GTEST_ROOT}/include:${CPATH}"
export LD_LIBRARY_PATH="${GTEST_ROOT}/lib:${LD_LIBRARY_PATH}"
export LIBRARY_PATH="${GTEST_ROOT}/lib:${LIBRARY_PATH}"
export CMAKE_INCLUDE_PATH="${GTEST_ROOT}/include:${CMAKE_INCLUDE_PATH}"
export CMAKE_LIBRARY_PATH="${GTEST_ROOT}/lib:${CMAKE_LIBRARY_PATH}"

EndOfMsg

cd "${TEMP_DIR}" && sudo rm -rf "${GTEST_DIR}" && rm "${GTEST_PKG}"

# JDK
sudo apt -y install default-jdk

readonly JDK_VER="$(javac -version | awk '{ print $2 }')"

# Maven
readonly MAVEN_VER="${USTORE_MAVEN_VER:-"3.6.0"}"
readonly MAVEN_PKG="apache-maven-${MAVEN_VER}-bin.tar.gz"
readonly MAVEN_DIR="apache-maven-${MAVEN_VER}"

cd "${TEMP_DIR}"
[[ -f "${MAVEN_PKG}" ]] ||
wget "https://www-us.apache.org/dist/maven/maven-${MAVEN_VER:0:1}/${MAVEN_VER}/binaries/${MAVEN_PKG}"
tar xzf "${MAVEN_PKG}"

sudo mkdir -p "${SHARE_HOME}/maven"
sudo rm -rf "${SHARE_HOME}/maven/${MAVEN_DIR}"
sudo mv "${MAVEN_DIR}" "${SHARE_HOME}/maven/"

cat >> "${BASH_PROFILE}" <<-'EndOfMsg'
# Maven
export MAVEN_HOME="${SHARE_HOME}/maven/${MAVEN_DIR}"
export PATH="${MAVEN_HOME}/bin:${PATH}"

EndOfMsg

cd "${TEMP_DIR}" && sudo rm -rf "${MAVEN_DIR}" && rm "${MAVEN_PKG}"

# Python 3
readonly PYTHON3_VER="${USTORE_PYTHON3_VER:-"3.7.2"}"
readonly PYTHON3_PKG="Python-${PYTHON3_VER}.tgz"
readonly PYTHON3_DIR="Python-${PYTHON3_VER}"

sudo apt -y install libffi-dev

cd "${TEMP_DIR}"
[[ -f "${PYTHON3_PKG}" ]] ||
wget "https://www.python.org/ftp/python/${PYTHON3_VER}/${PYTHON3_PKG}"
tar xzf "${PYTHON3_PKG}"

cd "${PYTHON3_DIR}"
./configure --prefix="${SHARE_HOME}/python3"
make -j "${NCORES}"
sudo make install

cat >> "${BASH_PROFILE}" <<-'EndOfMsg'
# Python 3
export PYTHON3_ROOT="${SHARE_HOME}/python3"
export PATH="${PYTHON3_ROOT}/bin:${PATH}"

EndOfMsg

cd "${TEMP_DIR}" && sudo rm -rf "${PYTHON3_DIR}" && rm "${PYTHON3_PKG}"

# Python 2
readonly PYTHON_VER="${USTORE_PYTHON_VER:-"2.7.15"}"
readonly PYTHON_PKG="Python-${PYTHON_VER}.tgz"
readonly PYTHON_DIR="Python-${PYTHON_VER}"

cd "${TEMP_DIR}"
[[ -f "${PYTHON_PKG}" ]] ||
wget "https://www.python.org/ftp/python/${PYTHON_VER}/${PYTHON_PKG}"
tar xzf "${PYTHON_PKG}"

cd "${PYTHON_DIR}"
./configure --prefix="${SHARE_HOME}/python"
make -j "${NCORES}"
sudo make install

cat >> "${BASH_PROFILE}" <<-'EndOfMsg'
# Python 2
export PYTHON_ROOT="${SHARE_HOME}/python"
export PATH="${PYTHON_ROOT}/bin:${PATH}"

EndOfMsg

cd "${TEMP_DIR}" && sudo rm -rf "${PYTHON_DIR}" && rm "${PYTHON_PKG}"

# Ccache
readonly CCACHE_VER="${USTORE_CCACHE_VER:-"3.6"}"
readonly CCACHE_PKG="ccache-${CCACHE_VER}.tar.bz2"
readonly CCACHE_DIR="ccache-${CCACHE_VER}"

cd "${TEMP_DIR}"
[[ -f "${CCACHE_PKG}" ]] ||
wget "https://www.samba.org/ftp/ccache/${CCACHE_PKG}"
tar xjf "${CCACHE_PKG}"

cd "${CCACHE_DIR}"
./configure --prefix="${SHARE_HOME}/ccache"
make -j "${NCORES}"
sudo make install

cd "${SHARE_HOME}/ccache/bin"
sudo ln -s ccache gcc
sudo ln -s ccache g++
sudo ln -s ccache cc
sudo ln -s ccache c++

cat >> "${BASH_PROFILE}" <<-'EndOfMsg'
# ccache
export CCACHE_HOME="${SHARE_HOME}/ccache"
export PATH="${CCACHE_HOME}/bin:${PATH}"
export MANPATH="${CCACHE_HOME}/share/man:${MANPATH}"

EndOfMsg
source "${BASH_PROFILE}"

ccache -F 0
ccache -M 1G

cd "${TEMP_DIR}" && sudo rm -rf "${CCACHE_DIR}" && rm "${CCACHE_PKG}"

# End of script
cd "${WORK_DIR}"
sudo rm -rf "${TEMP_DIR}"

info "------------------------------------------------------------------------"
info_bold_green "INSTALLATION SUCCESSFUL"
info "------------------------------------------------------------------------"
info "Package versions:"
info "  - CMake: ${CMAKE_VER}"
info "  - Boost: ${BOOST_VER}"
info "  - gflags: ${GFLAGS_VER}"
info "  - Protocol Buffers: ${PROTOBUF_VER}"
info "  - Crypto++: ${CRYPTOPP_VER}"
info "  - ZeroMQ: ${ZMQ_VER}"
info "  - CZMQ: ${CZMQ_VER}"
info "  - RocksDB: ${ROCKSDB_VER}"
info "  - Google Test: ${GTEST_VER}"
info "  - OpenJDK: ${JDK_VER}"
info "  - Maven: ${MAVEN_VER}"
info "  - Python 2: ${PYTHON_VER}"
info "  - Python 3: ${PYTHON3_VER}"
info "  - CCache: ${CCACHE_VER}"
info "Installed in: ${DEPS_DIR}"
info "Updated configuration: ${BASH_PROFILE}"
info "Finished at: $(date +"%T %Z, %-d %B %Y")"
info "Total time: $(timer "${START_TIME}")"
info "------------------------------------------------------------------------"

exit 0
