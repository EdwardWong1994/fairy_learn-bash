#!/usr/bin/env bash
#
# Install ForkBase dependencies on Ubuntu.
#
# https://github.com/streamjoin/forkbase-doc/blob/master/installation/install-deps.md

set -o nounset
set -o errexit
set -o errtrace
set -o pipefail

[[ -n "${__SCRIPT_DIR+x}" ]] ||
readonly __SCRIPT_DIR="$(cd "$(dirname -- "${BASH_SOURCE[0]}")" && pwd -P)"

[[ -n "${__SCRIPT_NAME+x}" ]] ||
readonly __SCRIPT_NAME="$(basename -- "$0")"

# Include libraries
source "${FAIRY_HOME:-${__SCRIPT_DIR}/..}/_common_lib/output_utils.sh"
source "${FAIRY_HOME:-${__SCRIPT_DIR}/..}/_common_lib/system.sh"

# Global variables
readonly START_TIME="$(timer)"

readonly BASH_PROFILE="${USTORE_BASH_PROFILE:-"${HOME}/.bash_profile"}"

DEPS_DIR="${USTORE_DEPS_DIR:-"/usr/local/share"}"
mkdir -p "${DEPS_DIR}"
readonly DEPS_DIR="$(cd "${DEPS_DIR}"; pwd -P)"

TEMP_DIR="${USTORE_TEMP_DIR:-"${HOME}/deps_install"}"
mkdir -p "${TEMP_DIR}"
readonly TEMP_DIR="$(cd "${TEMP_DIR}"; pwd -P)"

[[ "${DEPS_DIR}" != "${TEMP_DIR}" ]] ||
check_err "The dependency directory cannot be the same as the temporary directory"

readonly WORK_DIR="$(pwd -P)"
[[ "${WORK_DIR}" != "${TEMP_DIR}" ]] ||
check_err "The temporary directory cannot be the current working directory"

# The main function
main() {
  check_args "$@"
  check_sudo
  
  readonly WGET=(wget --quiet --show-progress -P "${DOWNLOAD_DIR}")
  
  install_essentials
  install_dep_cmake
  install_dep_boost
  install_dep_gflags
  install_dep_protobuf
  install_dep_cryptopp
  install_dep_zmq
  install_dep_czmq
  install_dep_rocksdb
  install_dep_gtest
  install_dep_jdk
  install_dep_maven
  install_dep_python3
  install_dep_python2
  install_dep_ccache
  
  cd "${WORK_DIR}"
  
  if [[ "${OPT_DOWNLOAD_ONLY}" = "true" ]]; then
    finish_download
  else
    finish_install
  fi
}
# End of the main function

# Helper functions
check_args() {
  OPT_DOWNLOAD_ONLY="false"
  
  for arg in "$@"; do
    case "${arg}" in
      # Print help message
      '--help'|'-h'|'-?' )
        print_help_msg
        exit 0
      ;;
      # Option: download packages only
      '--download'|'-D' )
        deal_with_arg_download
      ;;
      # Unknown options
      '-'* )
        echo "Unknown command argument(s) '${arg}' (see '--help' for usage)"
        exit 126
      ;;
      # Default: assign variable
      * )
        assign_var "${arg}"
      ;;
    esac
  done
  
  DOWNLOAD_DIR="${DOWNLOAD_DIR:-${TEMP_DIR}}"
  mkdir -p "${DOWNLOAD_DIR}"
  readonly DOWNLOAD_DIR="$(cd "${DOWNLOAD_DIR}"; pwd -P)"
}

print_help_msg() {
cat <<EndOfMsg
Usage: ${__SCRIPT_NAME} [OPTION]... [DIR]

Options:
  -h, -?, --help    display this help and exit
  -D, --download    download dependency packages only

EndOfMsg
}

deal_with_arg_download() {
  OPT_DOWNLOAD_ONLY="true"
  rmdir --ignore-fail-on-non-empty "${DEPS_DIR}"
  rmdir --ignore-fail-on-non-empty "${TEMP_DIR}"
}

assign_var () {
  [[ -z "${DOWNLOAD_DIR:-}" ]] || error_on_multi_download_dir
  DOWNLOAD_DIR="$1"
}

error_on_multi_download_dir() {
  err "Too many download directories! One or none should be specified.\n\n"
  print_help_msg
  exit 3
}

check_sudo() {
  [[ "${OPT_DOWNLOAD_ONLY}" = "true" ]] || sudo -v ||
  check_err "No sudo privilege for current account '${USER}'"
}

finish_install() {
  rmdir --ignore-fail-on-non-empty "${TEMP_DIR}"
  
  [[ ! -d "${DOWNLOAD_DIR}" ]] ||
  rmdir --ignore-fail-on-non-empty "${DOWNLOAD_DIR}"
  
  info "------------------------------------------------------------------------"
  info_bold_green "INSTALLATION SUCCESSFUL"
  info "------------------------------------------------------------------------"
  info "Packages:"
  info "  - CMake ${CMAKE_VER}"
  info "  - Boost ${BOOST_VER}"
  info "  - gflags ${GFLAGS_VER}"
  info "  - Protocol Buffers ${PROTOBUF_VER}"
  info "  - Crypto++ ${CRYPTOPP_VER}"
  info "  - ZeroMQ ${ZMQ_VER}"
  info "  - CZMQ ${CZMQ_VER}"
  info "  - RocksDB ${ROCKSDB_VER}"
  info "  - Google Test ${GTEST_VER}"
  info "  - OpenJDK ${JDK_VER}"
  info "  - Maven ${MAVEN_VER}"
  info "  - Python ${PYTHON2_VER}"
  info "  - Python ${PYTHON3_VER}"
  info "  - CCache ${CCACHE_VER}"
  info "Installed in: ${DEPS_DIR}"
  info "Updated configuration: ${BASH_PROFILE}"
  info "Finished at: $(date +"%T %Z, %-d %B %Y")"
  info "Total time: $(timer "${START_TIME}")"
  info "------------------------------------------------------------------------"
}

finish_download() {
  info "------------------------------------------------------------------------"
  info_bold_green "DOWNLOAD SUCCESSFUL"
  info "------------------------------------------------------------------------"
  info "Downloaded to: ${DOWNLOAD_DIR}"
  info "Finished at: $(date +"%T %Z, %-d %B %Y")"
  info "Total time: $(timer "${START_TIME}")"
  info "------------------------------------------------------------------------"
}

# Installation
install_essentials() {
  [[ "${OPT_DOWNLOAD_ONLY}" = "true" ]] && return 0
  
  sudo apt-get -y install build-essential autoconf pkg-config libtool git openssl >/dev/null
  
cat >> "${BASH_PROFILE}" <<-EndOfMsg
export SHARE_HOME="${DEPS_DIR}"
export NCORES="\$(cat /proc/cpuinfo | grep "cpu cores" | uniq | awk '{print \$NF}')"

EndOfMsg
  
  source "${BASH_PROFILE}"
}

install_dep_cmake() {
  readonly CMAKE_VER="${USTORE_CMAKE_VER:-"3.13.4"}"
  local -r cmake_dl_pkg="cmake-${CMAKE_VER}.tar.gz"
  local -r cmake_pkg="${DOWNLOAD_DIR}/${cmake_dl_pkg}"
  local -r cmake_dir="cmake-${CMAKE_VER}"
  
  if [[ ! -f "${cmake_pkg}" ]]; then
    "${WGET[@]}" "https://github.com/Kitware/CMake/releases/download/v${CMAKE_VER}/${cmake_dl_pkg}"
  fi
  [[ "${OPT_DOWNLOAD_ONLY}" = "true" ]] && return 0
  
  info "Installing CMake ${CMAKE_VER} ..."
  cd "${TEMP_DIR}"
  tar xzf "${cmake_pkg}" && cd "${cmake_dir}"
  
  ./bootstrap --prefix="${SHARE_HOME}/cmake" --parallel="${NCORES}"
  make -j "${NCORES}"
  sudo make install
  
  cd "${TEMP_DIR}" && sudo rm -rf "${cmake_dir}" && rm "${cmake_pkg}"
  
cat >> "${BASH_PROFILE}" <<-'EndOfMsg'
# CMake
export CMAKE_HOME="${SHARE_HOME}/cmake"
export PATH="${CMAKE_HOME}/bin:${PATH:-}"

EndOfMsg
  
  source "${BASH_PROFILE}"
}

install_dep_boost() {
  readonly BOOST_VER="${USTORE_BOOST_VER:-"1.69.0"}"
  local -r boost_pkg_ver="${BOOST_VER//./_}"
  local -r boost_dl_pkg="boost_${boost_pkg_ver}.tar.bz2"
  local -r boost_pkg="${DOWNLOAD_DIR}/boost-${BOOST_VER}.tar.bz2"
  local -r boost_dir="boost_${boost_pkg_ver}"
  
  if [[ ! -f "${boost_pkg}" ]]; then
    "${WGET[@]}" "https://dl.bintray.com/boostorg/release/${BOOST_VER}/source/${boost_dl_pkg}"
    mv "${DOWNLOAD_DIR}/${boost_dl_pkg}" "${boost_pkg}"
  fi
  [[ "${OPT_DOWNLOAD_ONLY}" = "true" ]] && return 0
  
  info "Installing Boost ${BOOST_VER} ..."
  cd "${TEMP_DIR}"
  tar xjf "${boost_pkg}" && cd "${boost_dir}"
  
  ./bootstrap.sh --prefix="${SHARE_HOME}/boost"
  sudo ./b2 install -j "${NCORES}"
  
  cd "${TEMP_DIR}" && sudo rm -rf "${boost_dir}" && rm "${boost_pkg}"
  
cat >> "${BASH_PROFILE}" <<-'EndOfMsg'
# Boost
export BOOST_ROOT="${SHARE_HOME}/boost"
export CPATH="${BOOST_ROOT}/include:${CPATH:-}"
export LD_LIBRARY_PATH="${BOOST_ROOT}/lib:${LD_LIBRARY_PATH:-}"
export LIBRARY_PATH="${BOOST_ROOT}/lib:${LIBRARY_PATH:-}"

EndOfMsg
}

install_dep_gflags() {
  readonly GFLAGS_VER="${USTORE_GFLAGS_VER:-"2.2.2"}"
  local -r gflags_dl_pkg="v${GFLAGS_VER}.tar.gz"
  local -r gflags_pkg="${DOWNLOAD_DIR}/gflags-${GFLAGS_VER}.tar.gz"
  local -r gflags_dir="gflags-${GFLAGS_VER}"
  
  if [[ ! -f "${gflags_pkg}" ]]; then
    "${WGET[@]}" "https://github.com/gflags/gflags/archive/${gflags_dl_pkg}"
    mv "${DOWNLOAD_DIR}/${gflags_dl_pkg}" "${gflags_pkg}"
  fi
  [[ "${OPT_DOWNLOAD_ONLY}" = "true" ]] && return 0
  
  info "Installing gflags ${GFLAGS_VER} ..."
  cd "${TEMP_DIR}"
  tar xzf "${gflags_pkg}" && cd "${gflags_dir}"
  
  mkdir -p build
  rm -rf build/*
  cd build
  cmake -DCMAKE_INSTALL_PREFIX="${SHARE_HOME}/gflags" -DBUILD_SHARED_LIBS=ON -DBUILD_STATIC_LIBS=ON ..
  make -j "${NCORES}"
  sudo make install
  
  cd "${TEMP_DIR}" && sudo rm -rf "${gflags_dir}" && rm "${gflags_pkg}"
  
cat >> "${BASH_PROFILE}" <<-'EndOfMsg'
# gflags
export GFLAGS_ROOT="${SHARE_HOME}/gflags"
export CPATH="${GFLAGS_ROOT}/include:${CPATH:-}"
export LD_LIBRARY_PATH="${GFLAGS_ROOT}/lib:${LD_LIBRARY_PATH:-}"
export LIBRARY_PATH="${GFLAGS_ROOT}/lib:${LIBRARY_PATH:-}"
export CMAKE_INCLUDE_PATH="${GFLAGS_ROOT}/include:${CMAKE_INCLUDE_PATH:-}"
export CMAKE_LIBRARY_PATH="${GFLAGS_ROOT}/lib:${CMAKE_LIBRARY_PATH:-}"

EndOfMsg
}

install_dep_protobuf() {
  readonly PROTOBUF_VER="${USTORE_PROTOBUF_VER:-"3.6.1"}"
  local -r protobuf_dl_pkg="v${PROTOBUF_VER}.tar.gz"
  local -r protobuf_pkg="${DOWNLOAD_DIR}/protobuf-${PROTOBUF_VER}.tar.gz"
  local -r protobuf_dir="protobuf-${PROTOBUF_VER}"
  
  if [[ ! -f "${protobuf_pkg}" ]]; then
    "${WGET[@]}" "https://github.com/protocolbuffers/protobuf/archive/${protobuf_dl_pkg}"
    mv "${DOWNLOAD_DIR}/${protobuf_dl_pkg}" "${protobuf_pkg}"
  fi
  [[ "${OPT_DOWNLOAD_ONLY}" = "true" ]] && return 0
  
  info "Installing Protocol Buffers ${PROTOBUF_VER} ..."
  cd "${TEMP_DIR}"
  tar xzf "${protobuf_pkg}" && cd "${protobuf_dir}"
  
  ./autogen.sh
  ./configure --prefix="${SHARE_HOME}/protobuf"
  make -j "${NCORES}"
  sudo make install
  
  cd "${TEMP_DIR}" && sudo rm -rf "${protobuf_dir}" && rm "${protobuf_pkg}"
  
cat >> "${BASH_PROFILE}" <<-'EndOfMsg'
# Protocol Buffers
export PROTOBUF_ROOT="${SHARE_HOME}/protobuf"
export PATH="${PROTOBUF_ROOT}/bin:${PATH:-}"
export CPATH="${PROTOBUF_ROOT}/include:${CPATH:-}"
export LD_LIBRARY_PATH="${PROTOBUF_ROOT}/lib:${LD_LIBRARY_PATH:-}"
export LIBRARY_PATH="${PROTOBUF_ROOT}/lib:${LIBRARY_PATH:-}"
export CMAKE_INCLUDE_PATH="${PROTOBUF_ROOT}/include:${CMAKE_INCLUDE_PATH:-}"
export CMAKE_LIBRARY_PATH="${PROTOBUF_ROOT}/lib:${CMAKE_LIBRARY_PATH:-}"

EndOfMsg
}

install_dep_cryptopp() {
  readonly CRYPTOPP_VER="${USTORE_CRYPTOPP_VER:-"8.0.0"}"
  local -r cryptopp_pkg_ver="${CRYPTOPP_VER//./_}"
  local -r cryptopp_dl_pkg="CRYPTOPP_${cryptopp_pkg_ver}.tar.gz"
  local -r cryptopp_pkg="${DOWNLOAD_DIR}/cryptopp-${CRYPTOPP_VER}.tar.gz"
  local -r cryptopp_dir="cryptopp-CRYPTOPP_${cryptopp_pkg_ver}"
  
  if [[ ! -f "${cryptopp_pkg}" ]]; then
    "${WGET[@]}" "https://github.com/weidai11/cryptopp/archive/${cryptopp_dl_pkg}"
    mv "${DOWNLOAD_DIR}/${cryptopp_dl_pkg}" "${cryptopp_pkg}"
  fi
  [[ "${OPT_DOWNLOAD_ONLY}" = "true" ]] && return 0
  
  info "Installing Crypto++ ${CRYPTOPP_VER} ..."
  cd "${TEMP_DIR}"
  tar xzf "${cryptopp_pkg}" && cd "${cryptopp_dir}"
  
  make -j "${NCORES}" libcryptopp.a libcryptopp.so
  sudo make install PREFIX="${SHARE_HOME}/cryptopp"
  
  cd "${TEMP_DIR}" && sudo rm -rf "${cryptopp_dir}" && rm "${cryptopp_pkg}"
  
cat >> "${BASH_PROFILE}" <<-'EndOfMsg'
# Crypto++
export CRYPTOPP_ROOT="${SHARE_HOME}/cryptopp"
export CPATH="${CRYPTOPP_ROOT}/include:${CPATH:-}"
export LD_LIBRARY_PATH="${CRYPTOPP_ROOT}/lib:${LD_LIBRARY_PATH:-}"
export LIBRARY_PATH="${CRYPTOPP_ROOT}/lib:${LIBRARY_PATH:-}"
export CMAKE_INCLUDE_PATH="${CRYPTOPP_ROOT}/include:${CMAKE_INCLUDE_PATH:-}"
export CMAKE_LIBRARY_PATH="${CRYPTOPP_ROOT}/lib:${CMAKE_LIBRARY_PATH:-}"

EndOfMsg
}

install_dep_zmq() {
  readonly ZMQ_VER="${USTORE_ZMQ_VER:-"4.3.1"}"
  local -r zmq_dl_pkg="v${ZMQ_VER}.tar.gz"
  local -r zmq_pkg="${DOWNLOAD_DIR}/zmq-${ZMQ_VER}.tar.gz"
  local -r zmq_dir="libzmq-${ZMQ_VER}"
  
  if [[ ! -f "${zmq_pkg}" ]]; then
    "${WGET[@]}" "https://github.com/zeromq/libzmq/archive/${zmq_dl_pkg}"
    mv "${DOWNLOAD_DIR}/${zmq_dl_pkg}" "${zmq_pkg}"
  fi
  [[ "${OPT_DOWNLOAD_ONLY}" = "true" ]] && return 0
  
  info "Installing ZeroMQ ${ZMQ_VER} ..."
  cd "${TEMP_DIR}"
  tar xzf "${zmq_pkg}" && cd "${zmq_dir}"
  
  ./autogen.sh
  ./configure --prefix="${SHARE_HOME}/zmq"
  make -j "${NCORES}"
  sudo make install
  
  cd "${TEMP_DIR}" && sudo rm -rf "${zmq_dir}" && rm "${zmq_pkg}"
  
cat >> "${BASH_PROFILE}" <<-'EndOfMsg'
# ZMQ
export ZMQ_ROOT="${SHARE_HOME}/zmq"
export CPATH="${ZMQ_ROOT}/include:${CPATH:-}"
export LD_LIBRARY_PATH="${ZMQ_ROOT}/lib:${LD_LIBRARY_PATH:-}"
export LIBRARY_PATH="${ZMQ_ROOT}/lib:${LIBRARY_PATH:-}"
export CMAKE_INCLUDE_PATH="${ZMQ_ROOT}/include:${CMAKE_INCLUDE_PATH:-}"
export CMAKE_LIBRARY_PATH="${ZMQ_ROOT}/lib:${CMAKE_LIBRARY_PATH:-}"

EndOfMsg
  
  source "${BASH_PROFILE}"
}

install_dep_czmq() {
  readonly CZMQ_VER="${USTORE_CZMQ_VER:-"4.2.0"}"
  local -r czmq_dl_pkg="v${CZMQ_VER}.tar.gz"
  local -r czmq_pkg="${DOWNLOAD_DIR}/czmq-${CZMQ_VER}.tar.gz"
  local -r czmq_dir="czmq-${CZMQ_VER}"
  
  if [[ ! -f "${czmq_pkg}" ]]; then
    "${WGET[@]}" "https://github.com/zeromq/czmq/archive/${czmq_dl_pkg}"
    mv "${DOWNLOAD_DIR}/${czmq_dl_pkg}" "${czmq_pkg}"
  fi
  [[ "${OPT_DOWNLOAD_ONLY}" = "true" ]] && return 0
  
  info "Installing CZMQ ${CZMQ_VER} ..."
  cd "${TEMP_DIR}"
  tar xzf "${czmq_pkg}" && cd "${czmq_dir}"
  
  ./autogen.sh
  ./configure --prefix="${SHARE_HOME}/czmq"
  make -j "${NCORES}"
  sudo make install
  
  cd "${TEMP_DIR}" && sudo rm -rf "${czmq_dir}" && rm "${czmq_pkg}"
  
cat >> "${BASH_PROFILE}" <<-'EndOfMsg'
# CZMQ
export CZMQ_ROOT="${SHARE_HOME}/czmq"
export CPATH="${CZMQ_ROOT}/include:${CPATH:-}"
export LD_LIBRARY_PATH="${CZMQ_ROOT}/lib:${LD_LIBRARY_PATH:-}"
export LIBRARY_PATH="${CZMQ_ROOT}/lib:${LIBRARY_PATH:-}"
export CMAKE_INCLUDE_PATH="${CZMQ_ROOT}/include:${CMAKE_INCLUDE_PATH:-}"
export CMAKE_LIBRARY_PATH="${CZMQ_ROOT}/lib:${CMAKE_LIBRARY_PATH:-}"

EndOfMsg
}

install_dep_rocksdb() {
  readonly ROCKSDB_VER="${USTORE_ROCKSDB_VER:-"5.17.2"}"
  local -r rocksdb_dl_pkg="v${ROCKSDB_VER}.tar.gz"
  local -r rocksdb_pkg="${DOWNLOAD_DIR}/rocksdb-${ROCKSDB_VER}.tar.gz"
  local -r rocksdb_dir="rocksdb-${ROCKSDB_VER}"
  
  if [[ ! -f "${rocksdb_pkg}" ]]; then
    "${WGET[@]}" "https://github.com/facebook/rocksdb/archive/${rocksdb_dl_pkg}"
    mv "${DOWNLOAD_DIR}/${rocksdb_dl_pkg}" "${rocksdb_pkg}"
  fi
  [[ "${OPT_DOWNLOAD_ONLY}" = "true" ]] && return 0
  
  info "Installing RocksDB ${ROCKSDB_VER} ..."
  cd "${TEMP_DIR}"
  tar xzf "${rocksdb_pkg}" && cd "${rocksdb_dir}"
  
  sudo apt-get -y install libsnappy-dev zlib1g-dev libbz2-dev liblz4-dev libzstd-dev >/dev/null
  make shared_lib -j "${NCORES}" USE_RTTI=1 DISABLE_WARNING_AS_ERROR=ON
  sudo make install-shared INSTALL_PATH="${SHARE_HOME}/rocksdb"
  
  cd "${TEMP_DIR}" && sudo rm -rf "${rocksdb_dir}" && rm "${rocksdb_pkg}"
  
cat >> "${BASH_PROFILE}" <<-'EndOfMsg'
# RocksDB
export ROCKSDB_ROOT="${SHARE_HOME}/rocksdb"
export CPATH="${ROCKSDB_ROOT}/include:${CPATH:-}"
export LD_LIBRARY_PATH="${ROCKSDB_ROOT}/lib:${LD_LIBRARY_PATH:-}"
export LIBRARY_PATH="${ROCKSDB_ROOT}/lib:${LIBRARY_PATH:-}"
export CMAKE_INCLUDE_PATH="${ROCKSDB_ROOT}/include:${CMAKE_INCLUDE_PATH:-}"
export CMAKE_LIBRARY_PATH="${ROCKSDB_ROOT}/lib:${CMAKE_LIBRARY_PATH:-}"

EndOfMsg
}

install_dep_gtest() {
  readonly GTEST_VER="${USTORE_GTEST_VER:-"1.8.1"}"
  local -r gtest_pkg_ver="release-${GTEST_VER}"
  local -r gtest_dl_pkg="${gtest_pkg_ver}.tar.gz"
  local -r gtest_pkg="${DOWNLOAD_DIR}/gtest-${GTEST_VER}.tar.gz"
  local -r gtest_dir="googletest-${gtest_pkg_ver}"
  
  if [[ ! -f "${gtest_pkg}" ]]; then
    "${WGET[@]}" "https://github.com/google/googletest/archive/${gtest_dl_pkg}"
    mv "${DOWNLOAD_DIR}/${gtest_dl_pkg}" "${gtest_pkg}"
  fi
  [[ "${OPT_DOWNLOAD_ONLY}" = "true" ]] && return 0
  
  info "Installing Google Test ${GTEST_VER} ..."
  cd "${TEMP_DIR}"
  tar xzf "${gtest_pkg}" && cd "${gtest_dir}"
  
  mkdir -p build
  rm -rf build/*
  cd build
  cmake -DCMAKE_INSTALL_PREFIX="${SHARE_HOME}/gtest" -DBUILD_SHARED_LIBS=ON ..
  make -j "${NCORES}"
  sudo make install
  
  cd "${TEMP_DIR}" && sudo rm -rf "${gtest_dir}" && rm "${gtest_pkg}"
  
cat >> "${BASH_PROFILE}" <<-'EndOfMsg'
# gtest
export GTEST_ROOT="${SHARE_HOME}/gtest"
export CPATH="${GTEST_ROOT}/include:${CPATH:-}"
export LD_LIBRARY_PATH="${GTEST_ROOT}/lib:${LD_LIBRARY_PATH:-}"
export LIBRARY_PATH="${GTEST_ROOT}/lib:${LIBRARY_PATH:-}"
export CMAKE_INCLUDE_PATH="${GTEST_ROOT}/include:${CMAKE_INCLUDE_PATH:-}"
export CMAKE_LIBRARY_PATH="${GTEST_ROOT}/lib:${CMAKE_LIBRARY_PATH:-}"

EndOfMsg
}

install_dep_jdk() {
  [[ "${OPT_DOWNLOAD_ONLY}" = "true" ]] && return 0
  
  info "Installing OpenJDK (via APT) ..."
  sudo apt-get -y install default-jdk >/dev/null
  readonly JDK_VER="$(javac -version | awk '{ print $2 }')"
}

install_dep_maven() {
  readonly MAVEN_VER="${USTORE_MAVEN_VER:-"3.6.0"}"
  local -r maven_dl_pkg="apache-maven-${MAVEN_VER}-bin.tar.gz"
  local -r maven_pkg="${DOWNLOAD_DIR}/maven-${MAVEN_VER}.tar.gz"
  local -r maven_dir="apache-maven-${MAVEN_VER}"
  
  if [[ ! -f "${maven_pkg}" ]]; then
    "${WGET[@]}" "https://www-us.apache.org/dist/maven/maven-${MAVEN_VER:0:1}/${MAVEN_VER}/binaries/${maven_dl_pkg}"
    mv "${DOWNLOAD_DIR}/${maven_dl_pkg}" "${maven_pkg}"
  fi
  [[ "${OPT_DOWNLOAD_ONLY}" = "true" ]] && return 0
  
  info "Installing Maven ${MAVEN_VER} ..."
  cd "${TEMP_DIR}"
  tar xzf "${maven_pkg}"
  sudo mkdir -p "${SHARE_HOME}/maven"
  sudo rm -rf "${SHARE_HOME}/maven/${maven_dir}"
  sudo mv "${maven_dir}" "${SHARE_HOME}/maven/"
  
  cd "${TEMP_DIR}" && sudo rm -rf "${maven_dir}" && rm "${maven_pkg}"
  
cat >> "${BASH_PROFILE}" <<-EndOfMsg
# Maven
export MAVEN_HOME="\${SHARE_HOME}/maven/${maven_dir}"
export PATH="\${MAVEN_HOME}/bin:\${PATH:-}"

EndOfMsg
}

install_dep_python3() {
  readonly PYTHON3_VER="${USTORE_PYTHON3_VER:-"3.7.2"}"
  local -r python3_dl_pkg="Python-${PYTHON3_VER}.tgz"
  local -r python3_pkg="${DOWNLOAD_DIR}/python-${PYTHON3_VER}.tgz"
  local -r python3_dir="Python-${PYTHON3_VER}"
  
  if [[ ! -f "${python3_pkg}" ]]; then
    "${WGET[@]}" "https://www.python.org/ftp/python/${PYTHON3_VER}/${python3_dl_pkg}"
    mv "${DOWNLOAD_DIR}/${python3_dl_pkg}" "${python3_pkg}"
  fi
  [[ "${OPT_DOWNLOAD_ONLY}" = "true" ]] && return 0
  
  info "Installing Python ${PYTHON3_VER} ..."
  cd "${TEMP_DIR}"
  tar xzf "${python3_pkg}" && cd "${python3_dir}"
  
  sudo apt-get -y install libffi-dev >/dev/null
  ./configure --prefix="${SHARE_HOME}/python3"
  make -j "${NCORES}"
  sudo make install
  
  cd "${TEMP_DIR}" && sudo rm -rf "${python3_dir}" && rm "${python3_pkg}"
  
cat >> "${BASH_PROFILE}" <<-'EndOfMsg'
# Python 3
export PYTHON3_ROOT="${SHARE_HOME}/python3"
export PATH="${PYTHON3_ROOT}/bin:${PATH:-}"

EndOfMsg
}

install_dep_python2() {
  readonly PYTHON2_VER="${USTORE_PYTHON_VER:-"2.7.15"}"
  local -r python2_dl_pkg="Python-${PYTHON2_VER}.tgz"
  local -r python2_pkg="${DOWNLOAD_DIR}/python-${PYTHON2_VER}.tgz"
  local -r python2_dir="Python-${PYTHON2_VER}"
  
  if [[ ! -f "${python2_pkg}" ]]; then
    "${WGET[@]}" "https://www.python.org/ftp/python/${PYTHON2_VER}/${python2_dl_pkg}"
    mv "${DOWNLOAD_DIR}/${python2_dl_pkg}" "${python2_pkg}"
  fi
  [[ "${OPT_DOWNLOAD_ONLY}" = "true" ]] && return 0
  
  info "Installing Python ${PYTHON2_VER} ..."
  cd "${TEMP_DIR}"
  tar xzf "${python2_pkg}" && cd "${python2_dir}"
  
  ./configure --prefix="${SHARE_HOME}/python"
  make -j "${NCORES}"
  sudo make install
  
  cd "${TEMP_DIR}" && sudo rm -rf "${python2_dir}" && rm "${python2_pkg}"
  
cat >> "${BASH_PROFILE}" <<-'EndOfMsg'
# Python 2
export PYTHON_ROOT="${SHARE_HOME}/python"
export PATH="${PYTHON_ROOT}/bin:${PATH:-}"

EndOfMsg
}

install_dep_ccache() {
  readonly CCACHE_VER="${USTORE_CCACHE_VER:-"3.6"}"
  local -r ccache_dl_pkg="ccache-${CCACHE_VER}.tar.bz2"
  local -r ccache_pkg="${DOWNLOAD_DIR}/${ccache_dl_pkg}"
  local -r ccache_dir="ccache-${CCACHE_VER}"
  
  if [[ ! -f "${ccache_pkg}" ]]; then
    "${WGET[@]}" "https://www.samba.org/ftp/ccache/${ccache_dl_pkg}"
  fi
  [[ "${OPT_DOWNLOAD_ONLY}" = "true" ]] && return 0
  
  info "Installing CCache ${CCACHE_VER} ..."
  cd "${TEMP_DIR}"
  tar xjf "${ccache_pkg}" && cd "${ccache_dir}"
  
  ./configure --prefix="${SHARE_HOME}/ccache"
  make -j "${NCORES}"
  sudo make install
  
  cd "${SHARE_HOME}/ccache/bin"
  sudo rm -f gcc g++ cc c++
  sudo ln -s ccache gcc
  sudo ln -s ccache g++
  sudo ln -s ccache cc
  sudo ln -s ccache c++
  
  cd "${TEMP_DIR}" && sudo rm -rf "${ccache_dir}" && rm "${ccache_pkg}"
  
cat >> "${BASH_PROFILE}" <<-'EndOfMsg'
# ccache
export CCACHE_HOME="${SHARE_HOME}/ccache"
export PATH="${CCACHE_HOME}/bin:${PATH:-}"
export MANPATH="${CCACHE_HOME}/share/man:${MANPATH:-}"

EndOfMsg
  
  source "${BASH_PROFILE}"
  ccache -F 0
  ccache -M 1G
}

# Execution
main "$@"
[[ "$0" != "${BASH_SOURCE[0]}" ]] || exit 0
