#!/bin/bash
#
# Create a sandbox account. 

# set -o nounset
# set -o errexit
set -o pipefail

# Include libraries
readonly SCRIPT_LIB_HOME="$(cd "$(dirname "$0")"; pwd -P)/lib"
source "${SCRIPT_LIB_HOME}/output_utils.sh"
source "${SCRIPT_LIB_HOME}/load_script_conf.sh"

# Command parameters
readonly ID="$1"
[[ -n "${ID}" ]]
check_cmd_args "<sandbox_id>"

# Set variables
readonly GROUP="${SANDBOX_USERNAME_INIT-${DEFAULT_USERNAME_INIT}}"

readonly USERNAME="${GROUP:+"${GROUP}-"}${ID}"

readonly USER_HOME_ROOT=\
"${SANDBOX_USER_HOME_ROOT:-${DEFAULT_USER_HOME_ROOT:-$(dirname "$HOME")}}"

readonly USER_HOME="${USER_HOME_ROOT}/${USERNAME}"

readonly PASSWORD="${SANDBOX_PASSWORD_INIT-${DEFAULT_PASSWORD_INIT}}${ID}"

readonly PEM_HOME="${SANDBOX_PEM_HOME-${DEFAULT_PEM_HOME}}"

readonly ENV_CONF_REF_ROOT=\
"${SANDBOX_ENV_CONF_REF_ROOT-${DEFAULT_ENV_CONF_REF_ROOT}}"

readonly ENV_CONF_LIST="${SANDBOX_ENV_CONF_LIST-${DEFAULT_ENV_CONF_LIST}}"

readonly ADD_ON_GROUPS="${SANDBOX_ADD_ON_GROUPS-${DEFAULT_ADD_ON_GROUPS}}"

# Create groups, if necessary
for G in ${GROUP} ${ADD_ON_GROUPS}; do
  [[ -n "$(getent group "${G}")" ]] || (sudo groupadd "${G}")
  check_failed "failed to create non-existing group '${G}'"
done

# Delete the group named after the account
[[ -z "$(getent group "${USERNAME}")" ]] || (sudo groupdel "${USERNAME}")
check_failed "failed to delete existing group '${USERNAME}'"

# Create account
create_account() {
  sudo useradd "$1" "${2:+"-G"}" "$2" -m -d "$3" -s /bin/bash
}
create_account "${USERNAME}" "${GROUP}" "${USER_HOME}"
check_failed "failed to create account '${USERNAME}'"

for G in ${ADD_ON_GROUPS}; do
  sudo usermod -a -G "${G}" "${USERNAME}" 
done

# Configure account password
echo -e "${PASSWORD}\n${PASSWORD}" | sudo passwd "${USERNAME}" > /dev/null 2>&1
check_failed "failed to set password for account '${USERNAME}'"

# Confiugre enviornment
sudo chmod 777 "${USER_HOME}"

init_conf() {
  local -r SRC_CONF_FILE="${ENV_CONF_REF_ROOT}/$1"
  if [[ -f "${SRC_CONF_FILE}" ]]; then
    local -r DST_CONF_FILE="${USER_HOME}/$1"
    sudo touch "${DST_CONF_FILE}"
    sudo chmod 722 "${DST_CONF_FILE}"
    sudo cat "${SRC_CONF_FILE}" > "${DST_CONF_FILE}"
    sudo chmod 644 "${DST_CONF_FILE}"
    sudo chown "${USERNAME}":"${USERNAME}" "${DST_CONF_FILE}"
  fi
}

if [[ -n "${ENV_CONF_REF_ROOT}" ]]; then
  for CONF_FILE in ${ENV_CONF_LIST}; do
    init_conf "${CONF_FILE}"
  done
fi

# Generate SSH keys (private/public)
readonly USER_SSH_ROOT="${USER_HOME}/.ssh"
sudo mkdir -p "${USER_SSH_ROOT}"
sudo ssh-keygen -t rsa -f "${USER_SSH_ROOT}/id_rsa" -P '' -q
sudo touch "${USER_SSH_ROOT}/authorized_keys"
sudo chmod 722 "${USER_SSH_ROOT}/authorized_keys"
sudo cat "${USER_SSH_ROOT}/id_rsa.pub" >> "${USER_SSH_ROOT}/authorized_keys"
sudo chmod 600 "${USER_SSH_ROOT}/authorized_keys"
if [[ -n "${PEM_HOME}" ]]; then
  sudo mkdir -p "${PEM_HOME}"
  sudo cp -f "${USER_SSH_ROOT}/id_rsa" "${PEM_HOME}/${USERNAME}.pem"
  sudo chmod +r "${PEM_HOME}/${USERNAME}.pem" 
fi
sudo chown -R "${USERNAME}":"${USERNAME}" "${USER_SSH_ROOT}"
sudo chmod 700 "${USER_HOME}"

# End of script
echo "account '${USERNAME}' has been created successfully"
exit 0
