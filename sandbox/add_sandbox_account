#!/bin/bash
#
# Create a sandbox account. 

# set -o nounset
# set -o errexit
set -o pipefail

DEFAULT_SANDBOX_SCRIPT_CONF="${HOME}/sandbox/scripts/sandbox_script.conf.default"

# Output utilities
err() {
  echo -e "$@" >&2
}

failed() {
  printf "\033[31m" >&1  # set to red font for stdout
  printf "$@" >&2  # output to stderr
  printf "\033[0m\n" >&1  # reset color for stdout
}

# Inlcude script configuration
readonly SCRIPT_CONF="${SANDBOX_SCRIPT_CONF:-${DEFAULT_SANDBOX_SCRIPT_CONF}}"
if [[ -n "${SCRIPT_CONF}" ]]; then
  source "${SCRIPT_CONF}"
  if [[ "$?" -ne 0 ]]; then
    err "Failed to load script configuration: ${SCRIPT_CONF}"
    exit 5
  fi
else
  err "Script configuration is not specified"
  exit 4
fi

# Validate command parameters
if [[ "$#" -lt 1 ]]; then
  err "Usage: $(basename "$0") <sandbox_id>"
  exit 1
fi

# Set variables
readonly ID="$1"

if [[ -n "${SANDBOX_USERNAME_INIT+x}" ]]; then
  readonly GROUP="${SANDBOX_USERNAME_INIT}"
else
  readonly GROUP="${DEFAULT_USERNAME_INIT}"
fi

if [[ -n "${GROUP}" ]]; then
  readonly USERNAME="${GROUP}-${ID}"
else
  readonly USERNAME="${ID}"
fi

if [[ -n "${SANDBOX_USER_HOME_ROOT}" ]]; then
  readonly USER_HOME_ROOT="${SANDBOX_USER_HOME_ROOT}"
elif [[ -n "${DEFAULT_USER_HOME_ROOT}" ]]; then
  readonly USER_HOME_ROOT="${DEFAULT_USER_HOME_ROOT}"
else
  readonly USER_HOME_ROOT="/home"
fi

readonly USER_HOME="${USER_HOME_ROOT}/$USERNAME"

if [[ -n "${SANDBOX_PASSWORD_INIT}" ]]; then
  readonly PASSWORD="${SANDBOX_PASSWORD_INIT}${ID}"
else
  readonly PASSWORD="${DEFAULT_PASSWORD_INIT}${ID}"
fi

if [[ -n "${SANDBOX_PEM_HOME}" ]]; then
  readonly PEM_HOME="${SANDBOX_PEM_HOME}"
else
  readonly PEM_HOME="${DEFAULT_PEM_HOME}"
fi

if [[ -n "${SANDBOX_ENV_CONF_REF_ROOT}" ]]; then
  readonly ENV_CONF_REF_ROOT="${SANDBOX_ENV_CONF_REF_ROOT}"
else
  readonly ENV_CONF_REF_ROOT="${DEFAULT_ENV_CONF_REF_ROOT}"
fi

if [[ -n "${SANDBOX_ENV_CONF_LIST}" ]]; then
  readonly ENV_CONF_LIST="${SANDBOX_ENV_CONF_LIST}"
else
  readonly ENV_CONF_LIST="${DEFAULT_ENV_CONF_LIST}"
fi

if [[ -n "${SANDBOX_ADD_ON_GROUPS}" ]]; then
  readonly ADD_ON_GROUPS="${SANDBOX_ADD_ON_GROUPS}"
else
  readonly ADD_ON_GROUPS="${DEFAULT_ADD_ON_GROUPS}"
fi

readonly GROUP_LIST="${GROUP} ${ADD_ON_GROUPS}"

# Create groups, if necessary
for G in ${GROUP_LIST}; do
  if [[ -z "$(getent group "${G}")" ]]; then
    sudo groupadd "${G}"
  fi
done

# Delete the group named after the account
if [[ -n "$(getent group "${USERNAME}")" ]]; then
  sudo groupdel "${USERNAME}"
fi

# Create account
if [[ -n "${GROUP}" ]]; then
  sudo useradd "${USERNAME}" -G "${GROUP}" -m -d "${USER_HOME}" -s /bin/bash
else
  sudo useradd "${USERNAME}" -m -d "${USER_HOME}" -s /bin/bash
fi

RET="$?"
if [[ "${RET}" -ne 0 ]]; then
  failed "failed to create account '${USERNAME}'"
  exit "${RET}"
fi

for G in ${ADD_ON_GROUPS}; do
  sudo usermod -a -G "${G}" "${USERNAME}" 
done

# Configure account password
echo -e "${PASSWORD}\n${PASSWORD}" | sudo passwd "${USERNAME}" > /dev/null 2>&1

RET="$?"
if [[ "${RET}" -ne 0 ]]; then
  failed "failed to set password for account '${USERNAME}'"
  exit "${RET}"
fi

# Confiugre enviornment
sudo chmod 777 "${USER_HOME}"

init_conf() {
  local -r SRC_CONF_FILE="${ENV_CONF_REF_ROOT}/$1"
  if [[ -f "${SRC_CONF_FILE}" ]]; then
    local -r DST_CONF_FILE="${USER_HOME}/$1"
    sudo touch "${DST_CONF_FILE}"
    sudo chmod 722 "${DST_CONF_FILE}"
    sudo cat "${SRC_CONF_FILE}" > "${DST_CONF_FILE}"
    sudo chmod 644 "${DST_CONF_FILE}"
    sudo chown "${USERNAME}":"${USERNAME}" "${DST_CONF_FILE}"
  fi
}

for CONF_FILE in ${ENV_CONF_LIST}; do
  init_conf "${CONF_FILE}"
done

# Generate SSH keys (private/public)
readonly USER_SSH_ROOT="${USER_HOME}/.ssh"
sudo mkdir -p "${USER_SSH_ROOT}"
sudo ssh-keygen -t rsa -f "${USER_SSH_ROOT}/id_rsa" -P '' -q
sudo touch "${USER_SSH_ROOT}/authorized_keys"
sudo chmod 722 "${USER_SSH_ROOT}/authorized_keys"
sudo cat "${USER_SSH_ROOT}/id_rsa.pub" >> "${USER_SSH_ROOT}/authorized_keys"
sudo chmod 600 "${USER_SSH_ROOT}/authorized_keys"
sudo mkdir -p "${PEM_HOME}"
sudo cp -f "${USER_SSH_ROOT}/id_rsa" "${PEM_HOME}/${USERNAME}.pem"
sudo chmod +r "${PEM_HOME}/${USERNAME}.pem" 
sudo chown -R "${USERNAME}":"${USERNAME}" "${USER_SSH_ROOT}"
sudo chmod 700 "${USER_HOME}"

# End of script
echo "account '${USERNAME}' has been created successfully"
exit 0
