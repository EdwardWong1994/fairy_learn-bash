#!/usr/bin/env bash

set -o errexit
set -o errtrace
set -o nounset
set -o pipefail

# Global variables
readonly SCRIPT_DIR="$(cd "$(dirname -- "${BASH_SOURCE}")" && pwd -P)"
readonly SCRIPT_NAME="$(basename -- "$0")"

# The main function
main() {
  check_args "$@"
  [[ -n "${FILENAME}" ]] || exit_on_filename_missing
  [[ ! -f "${FILENAME}" ]] || exit_on_file_exists
  cat "${SCRIPT_DIR}/template.sh" > "${FILENAME}"
  chmod +x "${FILENAME}"
}

# Helper functions
check_args() {
  [[ "$#" -ge 1 ]] || exit_on_filename_missing
  
  for arg in "$@"; do
    case "${arg}" in
      # Print help message
      '--help'|'-h'|'-?' )
        print_help_msg
        exit 0
      ;;
      # Unknown options
      '-'* )
        echo "Unknown command argument(s) '${arg}' (see '--help' for usage)"
        exit 126
      ;;
      # Default: assign variable
      * )
        assign_var "${arg}"
      ;;
    esac
  done
}

print_help_msg() {
cat <<EndOfMsg
Usage: ${SCRIPT_NAME} [OPTION]... FILE

Options:
  -h, -?, --help    display this help and exit

EndOfMsg
}

assign_var () {
  [[ -z "${FILENAME:-}" ]] || exit_on_multi_filename
  readonly FILENAME="$1"
}

exit_on_filename_missing() {
  printf "ERROR: Missing target filename!\n\n"
  print_help_msg
  exit 126
}

exit_on_multi_filename() {
  printf "ERROR: Too many filenames! Only one should be specified.\n\n"
  print_help_msg
  exit 3
}

exit_on_file_exists() {
  printf "ERROR: File '${FILENAME}' already exists! (Not overwriting)\n\n"
  exit 4
}

# Execution (SHOULDN'T EDIT AFTER THIS LINE!)
main "$@"
exit "$?"
