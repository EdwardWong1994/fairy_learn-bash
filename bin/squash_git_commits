#!/usr/bin/env bash
#
# Squash Git commits via iterative rebase.

# Do not allow use of undefined vars. Use ${VAR:-} to use an undefined VAR
set -o nounset
# Exit on error. Append "|| true" if you expect an error.
set -o errexit
# Exit on error inside any functions or subshells.
set -o errtrace
# Catch the error in case mysqldump fails (but gzip succeeds) in `mysqldump |gzip`
set -o pipefail
# Turn on traces, useful while debugging but commented out by default
# set -o xtrace

IFS=$'\t\n'    # Split on newlines and tabs (but not on spaces)

[[ -n "${__SCRIPT_DIR+x}" ]] || readonly __SCRIPT_DIR="$(cd "$(dirname -- "${BASH_SOURCE[0]}")" && pwd -P)"
[[ -n "${__SCRIPT_NAME+x}" ]] || readonly __SCRIPT_NAME="$(basename -- "$0")"

# Include libraries
[[ -n "${FAIRY_COMMONS_HOME+x}" ]] || readonly FAIRY_COMMONS_HOME="${__SCRIPT_DIR}/../modules/fairy-commons"
# shellcheck disable=SC1090
source "${FAIRY_COMMONS_HOME}/lib/output_utils.sh"
# shellcheck disable=SC1090
source "${FAIRY_COMMONS_HOME}/lib/argument_utils.sh"
# shellcheck disable=SC1090
source "${FAIRY_COMMONS_HOME}/lib/filesystem.sh"
# shellcheck disable=SC1090
source "${FAIRY_COMMONS_HOME}/lib/system.sh"

# Global variables
[[ -n "${__START_TIME+x}" ]] || readonly __START_TIME="$(timer)"

# The main function
main() {
    check_args "$@"
    
    # Start your code here
    check_cmd_exists "git"
    
    git rev-parse --git-dir >/dev/null 2>&1 ||
    check_err "'${PWD}' is not a Git folder"
    
    local -r topic_branch="${ARG_POS_VAR_1:-"$(git rev-parse --abbrev-ref HEAD)"}"
    [[ -n "${topic_branch}" ]] ||
    check_err "Topic branch cannot be identified"
    
    local -r base_branch="${ARG_BASE_BRANCH:-$(get_master_branch_name)}"
    [[ "${base_branch}" != "${topic_branch}" ]] ||
    check_err "Base branch cannot be topic branch itself"
    
    info "Update base branch '${base_branch}'"
    git checkout "${base_branch}" && git pull
    
    info "Rebase topic branch '${topic_branch}' to base branch '${base_branch}'"
    git checkout "${topic_branch}" && git rebase -i "${base_branch}"
    
    [[ -n "${FLAG_ARG_OPT_PUSH:-}" ]] &&
    info "Push changes in '${topic_branch}'" &&
    git push -f
    
    [[ -n "${FLAG_ARG_OPT_SYNC:-}" ]] &&
    info "Synchronize changes with '${base_branch}' (remote)" &&
    git checkout "${base_branch}" && git rebase "${topic_branch}" && git push &&
    git checkout "${topic_branch}"
    
    # Do cleaning up and bookkeeping in 'finish()', if necessary
    finish
}

finish() {
    info "Completed in $(timer "${__START_TIME}")"
}

get_master_branch_name() {
    if git show-ref --verify --quiet "refs/heads/master"; then
        echo "master"
    elif git show-ref --verify --quiet "refs/heads/main"; then
        echo "main"
    else
        echo "<unknown>"
    fi
}

#######################################
# Check and process command-line arguments.
# Globals:
#   <none>
# Arguments:
#   Command-line arguments
# Returns:
#   Variables and flags set according to the command-line arguments
#
# Notes: Programming instructions for adding variables to be set by
#        command-line argument
#   (1) Add 'unset -v FLAG_ARG_SET_XXX' at the head
#   (2) Add a case entry with 'deal_with_arg_opt' for the option
#   (3) Add an 'arg_set_opt_var' entry with variable name specified in the
#       default case, ending with "||"
#   (4) Add a 'check_dangling_arg_opt' entry at the end
#
# To add boolean option to be set by command-line argument, just follow
# the above steps (1) and (2) but not (3) and (4). The flag variable should
# follow the naming convention 'FLAG_ARG_XXX'.
#######################################
check_args() {
    # unset variables of option flags
    unset -v FLAG_ARG_SET_BASE_BRANCH
    unset -v FLAG_ARG_OPT_PUSH
    unset -v FLAG_ARG_OPT_SYNC
    
    # process each command-line argument
    for arg in "$@"; do
        case "${arg}" in
            # Print help message
            '--help'|'-h'|'-?' )
                print_usage
                exit 0
            ;;
            # Handler of setting the base branch
            '--base'|'-b' )
                deal_with_arg_opt "--base" "FLAG_ARG_SET_BASE_BRANCH"
            ;;
            # Handler of enabling pushing changes immediately
            '--push'|'-P' )
                deal_with_arg_opt "--push" "FLAG_ARG_OPT_PUSH"
            ;;
            # Handler of enabling pushing changes immediately
            '--sync'|'-S' )
                deal_with_arg_opt "--sync" "FLAG_ARG_OPT_SYNC"
            ;;
            # Unknown options
            '-'* )
                err "Unknown command argument(s) '${arg}' (see '--help' for usage)"
                exit 126
            ;;
            # Default: assign variables
            * )
                arg_set_opt_var "--base" "FLAG_ARG_SET_BASE_BRANCH" "ARG_BASE_BRANCH" "${arg}" ||
                arg_set_pos_var "${arg}"    # KEEP THIS AT THE TAIL
            ;;
        esac
    done
    
    # sanity check
    check_dangling_arg_opt "--base" "FLAG_ARG_SET_BASE_BRANCH"
}

print_usage() {
cat <<EndOfMsg
Usage: ${__SCRIPT_NAME} [OPTION]... <branch>

Options:
  -h, -?, --help         display this help and exit
  -b, --base <branch>    set base branch (default: master)
  -P, --push             push immediately
  -S, --sync             sync with base branch and its remote

EndOfMsg
}

# Execution (SHOULDN'T EDIT AFTER THIS LINE!)
main "$@"
[[ "$0" != "${BASH_SOURCE[0]}" ]] || exit 0
