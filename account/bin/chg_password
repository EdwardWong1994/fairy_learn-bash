#!/usr/bin/env bash
#
# Update the password of an account.

# Do not allow use of undefined vars. Use ${VAR:-} to use an undefined VAR
set -o nounset
# Exit on error. Append "|| true" if you expect an error.
set -o errexit
# Exit on error inside any functions or subshells.
set -o errtrace
# Catch the error in case mysqldump fails (but gzip succeeds) in `mysqldump |gzip`
set -o pipefail
# Turn on traces, useful while debugging but commented out by default
# set -o xtrace

IFS=$'\t\n'    # Split on newlines and tabs (but not on spaces)

[[ -n "${__SCRIPT_DIR+x}" ]] || readonly __SCRIPT_DIR="$(cd "$(dirname -- "${BASH_SOURCE[0]}")" && pwd -P)"
[[ -n "${__SCRIPT_NAME+x}" ]] || readonly __SCRIPT_NAME="$(basename -- "$0")"

# Include libraries
[[ -n "${FAIRY_HOME+x}" ]] || readonly FAIRY_HOME="${__SCRIPT_DIR}/../.."
# shellcheck disable=SC1090
source "${FAIRY_HOME}/_common_lib/argument_utils.sh"
# shellcheck disable=SC1090
source "${FAIRY_HOME}/_common_lib/output_utils.sh"
# shellcheck disable=SC1090
source "${FAIRY_HOME}/account/lib/load_script_conf.sh"

# The main function
main() {
  check_args "$@"
  set_globals
  
  validate_account
  update_passwd
  
  # Do cleaning up and bookkeeping in 'finish()', if necessary
  finish
}

finish() {
  info "Password updated successfully for account '${USERNAME}'"
}

set_globals() {
  [[ -n "${ARG_POS_VAR_1:-}" ]] ||
  check_err "Missing account ID (see '--help' for usage)"
  local -r id="${ARG_POS_VAR_1}"
  
  local -r username_init="${ACCOUNT_USERNAME_INIT-${DEFAULT_USERNAME_INIT}}"
  readonly USERNAME="${username_init:+"${username_init}-"}${id}"
  
  [[ -n "${ARG_POS_VAR_2:-}" ]] ||
  check_err "Missing password (see '--help' for usage)"
  readonly PASSWORD="${ARG_POS_VAR_2}"
}

validate_account() {
  id -u "${USERNAME}" >/dev/null 2>&1 ||
  check_err "Account '${USERNAME}' does not exist"
}

update_passwd() {
  echo -e "${PASSWORD}\n${PASSWORD}" | sudo passwd "${USERNAME}" >/dev/null 2>&1 ||
  check_err "Failed to update password for account '${USERNAME}'"
}

#######################################
# Check and process command-line arguments.
# Globals:
#   <none>
# Arguments:
#   Command-line arguments
# Returns:
#   Variables and flags set according to the command-line arguments
#
# Notes: Programming instructions for adding variables to be set by
#        command-line argument
#   (1) Add 'unset -v FLAG_ARG_SET_XXX' at the head
#   (2) Add a case entry with 'deal_with_arg_opt' for the option
#   (3) Add an 'arg_set_opt_var' entry with variable name specified in the
#       default case, ending with "||"
#   (4) Add a 'check_dangling_arg_opt' entry at the end
#
# To add boolean option to be set by command-line argument, just follow
# the above steps (1) and (2) but not (3) and (4). The flag variable should
# follow the naming convention 'FLAG_ARG_XXX'.
#######################################
check_args() {
  # process each command-line argument
  for arg in "$@"; do
    case "${arg}" in
      # Print help message
      '--help'|'-h'|'-?' )
        print_usage
        exit 0
      ;;
      # Unknown options
      '-'* )
        err "Unknown command argument(s) '${arg}' (see '--help' for usage)"
        exit 126
      ;;
      # Default: assign variables
      * )
        arg_set_pos_var "${arg}"    # KEEP THIS AT THE TAIL
      ;;
    esac
  done
}

print_usage() {
cat <<EndOfMsg
Usage: ${__SCRIPT_NAME} [OPTION]... <id> <password>

Options:
  -h, -?, --help    display this help and exit

EndOfMsg
}

# Execution (SHOULDN'T EDIT AFTER THIS LINE!)
main "$@"
[[ "$0" != "${BASH_SOURCE[0]}" ]] || exit 0
